import com.xebialabs.gradle.plugins.XlReleasePluginPlugin

buildscript {
  repositories {
    jcenter()
    maven {
      url "http://www.knopflerfish.org/maven2/"
    }
    maven {
      url "https://dist.xebialabs.com/public/maven2/"
    }
  }
}
plugins {
  id "com.github.hierynomus.license" version "0.11.0"
  id "com.xebialabs.xl-deploy" version "0.2.1"
  id 'nebula.nebula-release' version '2.2.5'
//  id "com.xebialabs.xldp" version "1.0.4"
}

group 'com.xebialabs.xlrelease.plugins'

def xlrVersion = '4.7.2'
def xlrsHome = propertyOrFail('xlReleasesHome',
    'Please specify location of XL Release versions on you disk using Gradle property "xlReleasesHome"')
project.setProperty('xlReleaseHome', "$xlrsHome/xl-release-$xlrVersion-server")

apply plugin: XlReleasePluginPlugin
apply plugin: 'scala'

release {
  defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}
tasks.release.dependsOn tasks.deploy
tasks.releaseCheck.dependsOn tasks.clean
if (!project.hasProperty('release.scope')) {
  project.ext['release.scope'] = 'patch'
}

dependencies {
  compile 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'
  xlPluginBundle('org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5') {
    exclude group: 'com.google.code.gson', module: 'gson'
  }
//  distBundle('org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5') {
//    exclude group: 'com.google.code.gson', module: 'gson'
//  }

  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:1.6.0'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
  testCompile 'org.hamcrest:hamcrest-library:1.3'
  testCompile 'org.mockito:mockito-core:1.9.5'

  testCompile 'org.scala-lang:scala-library:2.11.6'
  testCompile 'org.scalatest:scalatest_2.11:2.2.4'

  testCompile files("$xlrsHome/xl-release-$xlrVersion-server/server-test-kit-${xlrVersion}.jar")
}
configurations.compile.extendsFrom configurations.xlReleaseJars

xlReleasePlugin {
  useSourcesDirectly = true
}

license {
  header rootProject.file('src/main/license/xebialabs_community.license')
  strictCheck true
  excludes(["**/*.json", "**/*.conf", "**/bootstrap/*.py"])
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.getDestinationDir()
}
artifacts {
  archives sourcesJar
  archives javadocJar
}

xldeploy {
  xldUrl = project.property('xlr-github-plugin.xldeploy.host')
  xldUsername = project.property('xlr-github-plugin.xldeploy.username')
  xldPassword = project.property('xlr-github-plugin.xldeploy.password')
  xldEnvironmentId = project.property('xlr-github-plugin.xldeploy.environment')
}
tasks.deploy.configure {
  deletePreviouslyDeployedDar = true
  generateDeployedOnUpgrade = true
}

repositories {
  mavenLocal()
  mavenCentral()
}

test {
  maxHeapSize = "1g"
  jvmArgs "-XX:MaxPermSize=256m"
  systemProperty 'xl.license.location', propertyOrFail('xlReleaseLicense',
      'Please specify XL Release license location using ' +
          '"-PxlReleaseLicense=/path/to/xl-release-license.lic" or in ~/.gradle/gradle.properties')
  systemProperty 'github.repository', propertyOrNull('xlr-github-plugin.itest.github.repository')
  systemProperty 'github.username', propertyOrNull('xlr-github-plugin.itest.github.username')
  systemProperty 'github.password', propertyOrNull('xlr-github-plugin.itest.github.password')
}

private def propertyOrNull(String name) {
  project.hasProperty(name) ? project.property(name) : null
}

private def propertyOrFail(String name, String message) {
  if (!project.hasProperty(name)) {
    throw new RuntimeException(message)
  }
  project.property(name)
}